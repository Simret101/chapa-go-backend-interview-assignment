// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "chapa/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: ctx, txn
func (_m *TransactionRepository) CreateTransaction(ctx context.Context, txn *domain.Transaction) error {
	ret := _m.Called(ctx, txn)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transaction) error); ok {
		r0 = rf(ctx, txn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransactionByRef provides a mock function with given fields: ctx, txnRef
func (_m *TransactionRepository) GetTransactionByRef(ctx context.Context, txnRef string) (*domain.Transaction, error) {
	ret := _m.Called(ctx, txnRef)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByRef")
	}

	var r0 *domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Transaction, error)); ok {
		return rf(ctx, txnRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Transaction); ok {
		r0 = rf(ctx, txnRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txnRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransactionStatus provides a mock function with given fields: ctx, txnRef, status
func (_m *TransactionRepository) UpdateTransactionStatus(ctx context.Context, txnRef string, status string) error {
	ret := _m.Called(ctx, txnRef, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransactionStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, txnRef, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
