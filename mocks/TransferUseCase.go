// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "chapa/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TransferUseCase is an autogenerated mock type for the TransferUseCase type
type TransferUseCase struct {
	mock.Mock
}

// CheckTransferStatus provides a mock function with given fields: ctx, ref
func (_m *TransferUseCase) CheckTransferStatus(ctx context.Context, ref string) (*domain.Transfer, error) {
	ret := _m.Called(ctx, ref)

	if len(ret) == 0 {
		panic("no return value specified for CheckTransferStatus")
	}

	var r0 *domain.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Transfer, error)); ok {
		return rf(ctx, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Transfer); ok {
		r0 = rf(ctx, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateTransfer provides a mock function with given fields: ctx, transfer
func (_m *TransferUseCase) InitiateTransfer(ctx context.Context, transfer *domain.Transfer) error {
	ret := _m.Called(ctx, transfer)

	if len(ret) == 0 {
		panic("no return value specified for InitiateTransfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transfer) error); ok {
		r0 = rf(ctx, transfer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessWebhook provides a mock function with given fields: ctx, payload, signature
func (_m *TransferUseCase) ProcessWebhook(ctx context.Context, payload map[string]interface{}, signature string) error {
	ret := _m.Called(ctx, payload, signature)

	if len(ret) == 0 {
		panic("no return value specified for ProcessWebhook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, string) error); ok {
		r0 = rf(ctx, payload, signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransferUseCase creates a new instance of TransferUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransferUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransferUseCase {
	mock := &TransferUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
